# defines
ECHO := echo
MKDIR := mkdir
CXX := g++
CC  := gcc
DEPEND = $(CXX) -M
MV := mv
RM := rm
LD := g++
# Tuned for recent x86 architectures. Adapt to your needs.
CFLAGS := -O3 -Wall -mmmx -msse2 -mfpmath=sse
#CFLAGS := -O0 -g -Wall

SOURCES += main.cpp

PROGRAMS += bindiff


#LIBRARIES := -L/usr/X11R6/lib -lX11

# Where do we want to put the stuff
OBJDIR := obj
DEPDIR := dep
BINDIR := .

ALLDIR := $(OBJDIR) $(DEPDIR) $(BINDIR)

# What do we need to generate
DEPENDENCIES = $(patsubst %, $(DEPDIR)/%, $(notdir $(SOURCES:.%=%.d)))
OBJECTS = $(patsubst %, $(OBJDIR)/%, $(subst .c,.o,$(SOURCES:.cpp=.o)))
BINARIES = $(BINDIR)/$(PROGRAMS)

# rules

all:: $(ALLDIR) $(OBJECTS) $(LIBBINARY) $(BINARIES)

$(ALLDIR):
	@$(ECHO) -- Creating directories
	@$(MKDIR) -p $(ALLDIR)


# Compile a C++ file
$(OBJDIR)/%.o: %.cpp
	@if test -d $(dir $@);then true;else $(ECHO) -- Creating directory $(dir $@);$(MKDIR) -p $(dir $@);fi
	@$(ECHO) -- Making dependencies for $< due to $(word 1,$(notdir $?)).
	@if $(DEPEND) $(CFLAGS) $(CXXFLAGS) $(DEFINES) $(INCLUDES) $< > $(DEPDIR)/$(notdir $<.d); then true; else $(RM) $(DEPDIR)/$(notdir $<.d); /bin/false; fi
	@$(ECHO) -n "$(OBJDIR)/$(subst ./,,$(dir $<))`cat $(DEPDIR)/$(notdir $<.d)`" > $(DEPDIR)/$(notdir $<.d)
	@$(ECHO) -- Compiling $<
ifdef TMPDIR
	@$(ECHO) -- $(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -o $(TMPDIR)/tmplink_$(notdir $@) $<
	@$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -o $(TMPDIR)/tmplink_$(notdir $@) $<
	@$(MV) $(TMPDIR)/tmplink_$(notdir $@) $@
else
	@$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -o $@ $<
endif
	@$(RM) -rf $(BINARIES)


# Compile a C file
$(OBJDIR)/%.o: %.c
	@if test -d $(dir $@);then true;else $(ECHO) -- Creating directory $(dir $@);$(MKDIR) -p $(dir $@);fi
	@$(ECHO) -- Making dependencies for $< due to $(word 1,$(notdir $?)).
	@if $(DEPEND) $(CFLAGS) $(CXXFLAGS) $(DEFINES) $(INCLUDES) $< > $(DEPDIR)/$(notdir $<.d); then true; else $(RM) $(DEPDIR)/$(notdir $<.d); /bin/false; fi
	@$(ECHO) -n "$(OBJDIR)/$(subst ./,,$(dir $<))`cat $(DEPDIR)/$(notdir $<.d)`" > $(DEPDIR)/$(notdir $<.d)
	@$(ECHO) -- Compiling $<
ifdef TMPDIR
	@$(ECHO) $(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -o $(TMPDIR)/tmplink_$(notdir $@) $<
	@$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -o $(TMPDIR)/tmplink_$(notdir $@) $<
	@$(MV) $(TMPDIR)/tmplink_$(notdir $@) $@
else
	@$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -o $@ $<
endif
	@$(RM) -rf $(BINARIES)


# link program

$(BINARIES):
	@if test -d $(dir $@);then true;else $(ECHO) -- Creating directory $(dir $@);$(MKDIR) -p $(dir $@);fi
	@$(ECHO) -- Linking $(@F)
ifdef TMPDIR
	@$(ECHO) $(LD) $(LDFLAGS) $(OBJECTS) -o $(TMPDIR)/tmplink_$(notdir $@) $< $(LIBRARIES)
	@$(LD) $(LDFLAGS) $(OBJECTS) -o $(TMPDIR)/tmplink_$(notdir $@) $< $(LIBRARIES)
	@$(MV) $(TMPDIR)/tmplink_$(notdir $@) $@
else
	@$(LD) $(LDFLAGS) $(OBJECTS) -o $@ $< $(LIBRARIES)
endif


# Remove files generated by a make in this directory
clean::
	@$(ECHO) -- Cleaning up in $(shell pwd).
	@$(RM) -rf $(OBJECTS) $(DEPENDENCIES) $(BINARIES)
	@$(RM) -rf $(LIBBINARY) 


# make sure recompilation is done if smth in dependency has changed
FORCE:

ifneq ($(DEPENDENCIES),)
-include $(DEPENDENCIES)
endif
